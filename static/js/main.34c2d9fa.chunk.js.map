{"version":3,"sources":["utils/golf-utils.js","utils/country-svgs.js","components/scorecard/scorecard.js","components/player-modal/player-modal.js","state/player/player-actions.js","components/score-card.js","assets/masters_title.svg","assets/masters_logo.png","components/page-layout/page-layout.js","state/masters/masters-api.js","state/masters/masters-actions.js","state/selectors.js","state/picks/picks-actions.js","pages/summary.js","state/masters/masters-reducer.js","state/picks/picks-reducer.js","state/player/player-reducer.js","state/store.js","pages/leaderboard.js","app.js","state/root-reducer.js","serviceWorker.js","index.js"],"names":["getNumberAsGolfString","total","getMissedCutScore","score","todaysWorstScore","parseInt","process","parseGolfScore","getDisplayName","firstName","lastName","split","map","name","concat","join","getFirstNameInitials","getPosition","pos","status","countries","ARG","AUS","AUT","CAN","CHI","CHN","COL","ENG","ESP","FIJ","FRA","GER","JPN","IRL","ITA","KOR","MEX","NIR","NOR","RSA","SCO","SWE","THA","TPE","TWN","USA","WAL","Scorecard","rounds","holes","pars","today","position","id","className","hole","i","round1","par","roundStatus","scores","Fragment","j","getScoreStyling","getRoundScore","reduce","a","b","compact","length","getScore","difference","PlayerModalElement","PlayerModal","UIkit","modal","useSelector","state","player","stats","first_name","last_name","topar","countryCode","round2","round3","round4","masters","initialScores","useMemo","data-uk-modal","type","data-uk-close","data-uk-grid","width","src","alt","watchPlayerAsync","updateCurrentPlayerAsync","CURRENT_PLAYER_UPDATE_REQUESTED","CURRENT_PLAYER_UPDATE_SUCCESS","takeLatest","CurrentPlayerUpdate","payload","put","ScoreCard","person","dispatch","useDispatch","players","k","cut","onClick","show","getPlayerScoreAsString","href","data-uk-scroll","PageLayout","children","mastersTitle","mastersLogo","data-uk-navbar","exact","to","activeClassName","MastersApi","axios","get","watchStatsAsync","pollStatsAsync","STATS_SUCCESS","STATS_START_POLLING_REQUESTED","STATS_STOP_POLLING_REQUESTED","take","race","task","call","cancel","StatsSuccess","data","delay","StatsStartPolling","StatsStopPolling","Masters","Picks","picks","watchPicksAsync","updatePicksAsync","PICKS_UPDATE_REQUESTED","PICKS_UPDATE_SUCCESS","select","people","connectUserPicksWithStats","PicksUpdateSuccess","PicksUpdate","user","pick","find","golfer","dq","sort","playerA","playerB","scoreNumber","personA","personB","Summary","WORST_SCORE_DAY_3","IS_WEEKEND","Math","max","getTodaysWorstScore","useEffect","initialState","yardages","MastersStatsReducer","action","JSON","parse","PicksReducer","PlayerReducer","rootSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","history","createHashHistory","all","Leaderboard","showPlayerModal","display_name2","thru","teetime","storeConfig","store","createStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","run","App","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.34c2d9fa.chunk.js","sourcesContent":["export function getNumberAsGolfString(total) {\n    if (total === 0) return 'E';\n    else if (total > 0) return `+${total}`;\n    else return total;\n}\n\nexport function getMissedCutScore(score, todaysWorstScore = 0) {\n    return score + parseInt(process.env.REACT_APP_WORST_SCORE_DAY_3) + parseInt(process.env.REACT_APP_WORST_SCORE_DAY_4) + todaysWorstScore;\n}\n\nexport function parseGolfScore(score = '0') {\n    score = score || '0';\n    if (score === 'E') {\n        return 0;\n    } else {\n        return parseInt(score);\n    }\n}\n\nexport function getTodaysWorstScore(players = []) {\n    return Math.max(...players.map(player => parseGolfScore(player.today)));\n}\n\nexport function getDisplayName(firstName, lastName) {\n    return (firstName && lastName) ? `${getFirstNameInitials(firstName)} ${lastName}` : '';\n}\n\nexport function getFirstNameInitials(firstName) {\n    return firstName.split(' ').map(name => name[0].concat('.')).join(' ');\n}\n\nexport function getPosition(pos, status) {\n    if (status === 'C') return 'CUT';\n    else if (status === 'W') return 'WD';\n    else if (status === 'D') return 'DQ';\n    else return pos || '-';\n}","import ARG from 'svg-country-flags/svg/ar.svg';\nimport AUS from 'svg-country-flags/svg/au.svg';\nimport AUT from 'svg-country-flags/svg/at.svg';\nimport CAN from 'svg-country-flags/svg/ca.svg';\nimport CHI from 'svg-country-flags/svg/cl.svg';\nimport CHN from 'svg-country-flags/svg/cn.svg';\nimport COL from 'svg-country-flags/svg/co.svg';\nimport ENG from 'svg-country-flags/svg/gb-eng.svg';\nimport ESP from 'svg-country-flags/svg/es.svg';\nimport FIJ from 'svg-country-flags/svg/fj.svg';\nimport FRA from 'svg-country-flags/svg/fr.svg';\nimport GER from 'svg-country-flags/svg/de.svg';\nimport IRL from 'svg-country-flags/svg/ie.svg';\nimport ITA from 'svg-country-flags/svg/it.svg';\nimport JPN from 'svg-country-flags/svg/jp.svg';\nimport KOR from 'svg-country-flags/svg/kr.svg';\nimport MEX from 'svg-country-flags/svg/mx.svg';\nimport NOR from 'svg-country-flags/svg/no.svg';\nimport RSA from 'svg-country-flags/svg/za.svg';\nimport SCO from 'svg-country-flags/svg/gb-sct.svg';\nimport SWE from 'svg-country-flags/svg/se.svg';\nimport THA from 'svg-country-flags/svg/th.svg';\nimport TWN from 'svg-country-flags/svg/tw.svg';\nimport USA from 'svg-country-flags/svg/us.svg';\nimport WAL from 'svg-country-flags/svg/gb-wls.svg'\n\nexport const countries = {\n    ARG,\n    AUS,\n    AUT,\n    CAN,\n    CHI,\n    CHN,\n    COL,\n    ENG,\n    ESP,\n    FIJ,\n    FRA,\n    GER,\n    JPN,\n    IRL,\n    ITA,\n    KOR,\n    MEX,\n    NIR: IRL,\n    NOR,\n    RSA,\n    SCO,\n    SWE,\n    THA,\n    TPE: TWN,\n    USA,\n    WAL\n}","import React from 'react';\nimport { compact } from 'lodash';\nimport './scorecard.css';\n\nexport default function Scorecard({ rounds, holes, pars, today, position, id }) {\n\n    return (\n        <div className='grid-container uk-text-light uk-text-small uk-overflow-auto uk-margin-top'>\n            <div className='header'>Hole</div>\n            {holes.map((hole, i) =>\n                <div key={`hole-${hole}-${i}`} className='header'>{hole}</div>\n            )}\n            <div className='header'>Total</div>\n\n            <div className='pars'>Par</div>\n            {pars.round1.map((par, i) =>\n                <div key={`round-${i}`} className='pars'>{par}</div>\n            )}\n            <div className='pars'>72</div>\n            {rounds.map(({ roundStatus, scores, total }, i) =>\n                <React.Fragment key={`${id}-scores-round-${i}`}>\n                    <div className='body'>R{i+1}</div>\n                    {scores.map((score, j) =>\n                        <div key={`round-${i+1}-par-${score}-${j+1}`} className={`body ${getScoreStyling(score, pars.round1[j])}`}>{score}</div>\n                    )}\n                    <div className='body'>{getRoundScore(scores, roundStatus)}</div>\n                </React.Fragment>\n            )}\n        </div>\n    )\n\n    /**\n     * Method returns the default score in the total column of the score card\n     * If the scores total is 0, they have not played any holes for the day so we use 'today', which will be their tee-time\n     * If the value of 'today' is undefined, they are no longer in the tournament so we return their position (either CUT or WD)\n     * If the scores total is not 0, they have started their round for the day;\n     * If they have not completed their round (scores is not an array of 18 holes) then we use 'today' to represent their score to par\n     * @param scores\n     * @returns {*|number}\n     */\n    function getScore(scores) {\n        const total = scores.reduce((a, b) => a + b, 0);\n        if (total === 0) return today ? today : position;\n        return compact(scores).length === 18 ? total : today;\n    }\n\n    function getRoundScore(scores, roundStatus) {\n        return roundStatus === 'Pre' ? '-' : getScore(scores);\n    }\n\n    function getScoreStyling(score, par) {\n        const difference = parseInt(score) - parseInt(par);\n        if (difference < -1) {\n            return 'eagle';\n        } else if (difference === -1) {\n            return 'birdie';\n        } else if (difference === 1) {\n            return 'bogey';\n        } else if (difference > 1) {\n            return 'double-bogey';\n        } else {\n            return '';\n        }\n    }\n}","import React, { useMemo }              from 'react';\nimport UIkit                           from 'uikit';\nimport { useSelector }                 from 'react-redux';\nimport { countries }                   from '../../utils/country-svgs';\nimport { getDisplayName, getPosition } from '../../utils/golf-utils';\nimport Scorecard                       from '../scorecard/scorecard';\nimport './player-modal.css';\nimport '../scorecard/scorecard.css'\n\nlet PlayerModalElement;\n\nexport default function PlayerModal() {\n\n    const holes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n\n    PlayerModalElement = UIkit.modal('#player-modal');\n\n    let { player: { id, stats: { first_name, last_name, pos, status, topar, countryCode, today, round1, round2, round3, round4 } }, masters: { pars } } = useSelector(state => state);\n\n    const initialScores = { scores: [] };\n    // eslint-disable-next-line\n    let rounds = useMemo(() => [round1 || initialScores, round2 || initialScores, round3 || initialScores, round4 || initialScores], [round1, round2, round3, round4]);\n    let position = useMemo(() => getPosition(pos, status), [pos, status]);\n\n    return (\n        <div id='player-modal' data-uk-modal={true}>\n            <div className='uk-modal-dialog uk-modal-body player-modal'>\n                <button className='uk-modal-close-default' type='button' data-uk-close/>\n                <div className=\"uk-grid-small uk-flex-middle\" data-uk-grid>\n                    <div className=\"uk-width-auto\">\n                        <img className=\"uk-border-circle\" width=\"75\" src={`https://www.masters.com/images/players/2021/240x240/${id}.jpg`} alt={`${first_name} ${last_name}`}/>\n                    </div>\n                    <div className=\"uk-width-expand\">\n                        <h3 className=\"uk-card-title uk-margin-remove-bottom\">{getDisplayName(first_name, last_name)}</h3>\n                        <p className=\"uk-text-meta uk-margin-remove-top\">\n                            <img className='uk-preserve-width' src={countries[countryCode]} width=\"20\" alt={countryCode}/>\n                            <span className='uk-text-light'> Pos. <span className='uk-text-emphasis'>{position}</span> | Score: <span className='uk-text-emphasis'>{topar || '-'}</span></span>\n                        </p>\n                    </div>\n                </div>\n\n                <Scorecard rounds={rounds || []} holes={holes} pars={pars} today={today} position={position} id={id}/>\n            </div>\n        </div>\n    )\n\n}\n\nexport { PlayerModalElement };","import { put, takeLatest } from 'redux-saga/effects';\n\nexport const CURRENT_PLAYER_UPDATE_REQUESTED = 'CURRENT_PLAYER_UPDATE_REQUESTED';\nexport const CURRENT_PLAYER_UPDATE_SUCCESS   = 'CURRENT_PLAYER_UPDATE_SUCCESS';\n\nexport function* watchPlayerAsync() {\n    yield takeLatest(CURRENT_PLAYER_UPDATE_REQUESTED, updateCurrentPlayerAsync);\n}\n\nexport function CurrentPlayerUpdate(player) {\n    return {\n        type: CURRENT_PLAYER_UPDATE_REQUESTED,\n        payload: {\n            player\n        }\n    };\n}\n\nexport function* updateCurrentPlayerAsync({ payload: { player } }) {\n    yield put(CurrentPlayerUpdateSuccess(player));\n}\n\nexport function CurrentPlayerUpdateSuccess(payload) {\n    return {\n        type: CURRENT_PLAYER_UPDATE_SUCCESS,\n        payload\n    };\n}","import React                                        from 'react';\nimport { getMissedCutScore, getNumberAsGolfString } from '../utils/golf-utils';\nimport { countries }                                from '../utils/country-svgs';\nimport PlayerModal, { PlayerModalElement }          from './player-modal/player-modal';\nimport { useDispatch }                              from 'react-redux';\nimport { CurrentPlayerUpdate }                      from '../state/player/player-actions';\nimport '../index.css';\n\nexport default function ScoreCard({ person, position, todaysWorstScore }) {\n\n    let dispatch = useDispatch();\n\n    return (\n        <div className=\"uk-card uk-card-default uk-card-body\">\n            <div className=\"uk-card-badge uk-label\">{getNumberAsGolfString(person.total)}</div>\n            <h3 className=\"uk-card-title uk-margin-remove-bottom\">{person.name}</h3>\n            <p className=\"uk-text-meta uk-margin-remove-top\">\n                Position: {position}\n            </p>\n            <hr className=\"uk-divider-icon\"/>\n            <table className=\"uk-table uk-table-striped\">\n                <thead/>\n                <tbody>\n                {person.players.map(({ id, name, score, cut, stats }, k) =>\n                    <tr key={`score-card-${id}-${k}`} className='uk-text-middle'>\n                        <td className='uk-padding-remove-right uk-text-middle'>\n                            <img className=\"uk-border-circle uk-preserve-width\"\n                                 src={`https://www.masters.com/images/players/2021/240x240/${id}.jpg`} width=\"40\"\n                                 alt={name}/>\n                        </td>\n                        <td className='uk-text-left uk-text-middle'>\n                            <button className='uk-button uk-button-text uk-text-light uk-text-left uk-text-capitalize color-green' onClick={() => showPlayerModal({id, name, stats})}>{name}</button>\n                        </td>\n                        <td className='uk-text-left uk-text-middle'>\n                            <img className='uk-preserve-width' src={countries[stats.countryCode]} width=\"20\" alt={stats.countryCode}/>\n                        </td>\n                        <td className='uk-text-light uk-text-left uk-text-middle'>{getPlayerScoreAsString(stats.topar || 'E', stats.status)}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            <hr/>\n            <PlayerModal/>\n        </div>\n    )\n\n    function showPlayerModal(player) {\n        dispatch(CurrentPlayerUpdate(player));\n        PlayerModalElement.show();\n    }\n\n    function getPlayerScoreAsString(score, status) {\n        const isCut = status === 'C';\n        const isDisqualified = status === 'D';\n        if (isDisqualified) return 'DQ';\n        return (isCut\n                ? <span>\n                    {getNumberAsGolfString(getMissedCutScore(parseInt(score), todaysWorstScore))}\n                    <a href='#missed-cut' data-uk-scroll className='color-green'>*</a>\n                  </span>\n                : score);\n    }\n}","export default __webpack_public_path__ + \"static/media/masters_title.735bef9a.svg\";","export default __webpack_public_path__ + \"static/media/masters_logo.0655db44.png\";","import React        from 'react';\nimport mastersTitle from '../../assets/masters_title.svg';\nimport mastersLogo  from '../../assets/masters_logo.png';\nimport { NavLink }  from 'react-router-dom';\nimport '../../index.css';\n\nexport default function PageLayout({ children }) {\n\n    return (\n        <div className='uk-height-viewport uk-background-default uk-margin-medium-bottom'>\n            <div className='uk-container uk-text-center'>\n                <div className='uk-heading-divider uk-margin-top'>\n                    <img src={mastersTitle} width='200px' alt='The British Open Logo'/>\n                </div>\n                <img src={mastersLogo} width='90px' alt='PGA Tournament Logo'\n                     className='uk-position-small uk-position-top-right uk-margin-top uk-visible@l'/>\n                <nav className='uk-navbar-container uk-margin' data-uk-navbar='mode: click'>\n                    <div className='uk-navbar-left'>\n                        <ul className='uk-navbar-nav'>\n                            <li><NavLink exact to='/' activeClassName='color-green'>Standings</NavLink></li>\n                            <li><NavLink to='/leaderboard' activeClassName='color-green'>Leaderboard</NavLink></li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className='uk-align-center uk-width-1-1@m'>\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n\n}","import axios from 'axios';\n\nexport const MastersApi = {\n    getStats: () => axios.get('https://www.masters.com/en_US/scores/feeds/2021/scores.json')\n}","import { call, delay, put, race, take } from 'redux-saga/effects';\nimport { MastersApi }                   from './masters-api';\n\nexport const STATS_SUCCESS                 = 'STATS_SUCCESS';\nexport const STATS_ERROR                   = 'STATS_ERROR';\nexport const STATS_START_POLLING_REQUESTED = 'STATS_START_POLLING_REQUESTED';\nexport const STATS_STOP_POLLING_REQUESTED  = 'STATS_STOP_POLLING_REQUESTED';\n\nexport const POLLING_DELAY = 60000;\n\nexport function* watchStatsAsync() {\n    while (true) {\n        yield take(STATS_START_POLLING_REQUESTED);\n        yield race({\n            task: call(pollStatsAsync),\n            cancel: take(STATS_STOP_POLLING_REQUESTED)\n        })\n    }\n}\n\nexport function* pollStatsAsync() {\n    while (true) {\n        try {\n            const stats = yield call(MastersApi.getStats);\n            yield put(StatsSuccess(stats.data.data));\n        } catch (error) {\n            yield put(StatsError(error));\n        }\n        yield delay(POLLING_DELAY)\n    }\n}\n\nexport function StatsStartPolling() {\n    return {\n        type: STATS_START_POLLING_REQUESTED\n    }\n}\n\nexport function StatsStopPolling() {\n    return {\n        type: STATS_STOP_POLLING_REQUESTED\n    }\n}\n\nexport function StatsSuccess(stats) {\n    return {\n        type: STATS_SUCCESS,\n        payload: stats\n    }\n}\n\nexport function StatsError(error) {\n    return {\n        type: STATS_ERROR,\n        payload: error\n    }\n}","export const Masters = state => state.masters;\nexport const Picks   = state => state.picks;\n","import { put, select, takeLatest }           from 'redux-saga/effects';\nimport { Masters, Picks }                    from '../selectors';\nimport { getMissedCutScore, parseGolfScore } from '../../utils/golf-utils';\n\nexport const PICKS_UPDATE_REQUESTED = 'PICKS_UPDATE_REQUESTED';\nexport const PICKS_UPDATE_SUCCESS   = 'PICKS_UPDATE_SUCCESS';\n\nexport function* watchPicksAsync() {\n    yield takeLatest(PICKS_UPDATE_REQUESTED, updatePicksAsync);\n}\n\nexport function* updatePicksAsync({ payload: { todaysWorstScore } }) {\n    let masters = yield select(Masters);\n    let people  = yield select(Picks);\n\n    const payload = connectUserPicksWithStats(people, masters, todaysWorstScore);\n\n    yield put(PicksUpdateSuccess(payload));\n}\n\nexport function PicksUpdate(todaysWorstScore) {\n    return {\n        type: PICKS_UPDATE_REQUESTED,\n        payload: {\n            todaysWorstScore\n        }\n    }\n}\n\nexport function PicksUpdateSuccess(payload) {\n    return {\n        type: PICKS_UPDATE_SUCCESS,\n        payload\n    }\n}\n\nfunction connectUserPicksWithStats(picks, stats, todaysWorstScore) {\n    return picks\n        .map(user => {\n            user.total   = 0;\n            user.players = user.players\n                .map(pick => {\n                    pick.stats = stats.player.find(golfer => golfer.id === pick.id) || {};\n                    pick.cut   = pick.stats.status === 'C';\n                    pick.dq    = pick.stats.status === 'D';\n                    return pick;\n                })\n                .sort((playerA, playerB) => {\n                    // handle disqualified players\n                    if (!playerA.dq && playerB.dq) return -1;\n                    else if (playerA.dq && !playerB.dq) return 1;\n                    // handle cut players\n                    else if (!playerA.cut && playerB.cut) return -1;\n                    else if (playerA.cut && !playerB.cut) return 1;\n                    // sort by score to par\n                    else return parseGolfScore(playerA.stats.topar) - parseGolfScore(playerB.stats.topar);\n                })\n                .map((player, i) => {\n                    if (i < 3) {\n                        const scoreNumber = parseGolfScore(player.stats.topar);\n                        user.total += !player.cut ? scoreNumber : getMissedCutScore(scoreNumber, todaysWorstScore);\n                    }\n                    return player;\n                })\n            return user\n        })\n        .sort((personA, personB) => personA.total - personB.total);\n}","import React, { useEffect, useMemo }                  from 'react';\nimport { useDispatch, useSelector }                   from 'react-redux';\nimport ScoreCard                                      from '../components/score-card';\nimport PageLayout                                     from '../components/page-layout/page-layout';\nimport { StatsStartPolling, StatsStopPolling }        from '../state/masters/masters-actions';\nimport { PicksUpdate }                                from '../state/picks/picks-actions';\nimport { getNumberAsGolfString, getTodaysWorstScore } from '../utils/golf-utils';\nimport '../index.css';\n\nexport default function Summary() {\n\n    let dispatch           = useDispatch();\n    let { masters, picks } = useSelector(state => state);\n\n    const WORST_SCORE_DAY_3 = useMemo(() => parseInt(process.env.REACT_APP_WORST_SCORE_DAY_3), []);\n    // const WORST_SCORE_DAY_4 = useMemo(() => parseInt(process.env.REACT_APP_WORST_SCORE_DAY_4), []);\n    const IS_WEEKEND        = useMemo(() => process.env.REACT_APP_IS_WEEKEND, []);\n    const todaysWorstScore  = useMemo(() => process.env.REACT_APP_IS_TOURNAMENT_OVER ? 0 : getTodaysWorstScore(masters.player || []), [masters]);\n\n    useEffect(() => { dispatch(PicksUpdate(todaysWorstScore)); }, [masters, dispatch, todaysWorstScore]);\n    useEffect(() => {\n        dispatch(StatsStartPolling());\n        return () => {\n            dispatch(StatsStopPolling());\n        }\n    }, [dispatch]);\n\n    return (\n        <PageLayout>\n            <div className=\"uk-text-center\" data-uk-grid>\n                {picks.map((person, i) =>\n                    <div key={i} className=\"uk-width-1-3@l uk-width-1-2@m\">\n                        <ScoreCard person={person} position={i + 1} todaysWorstScore={todaysWorstScore}/>\n                    </div>)}\n            </div>\n            <div className={`uk-placeholder uk-text-left uk-padding-small ${!IS_WEEKEND ? 'uk-hidden' : ''}`}>\n                    <span id=\"missed-cut\">\n                        <span className='color-green'>* </span>\n                        The player has missed the cut so the worst scores from round 3 and 4 have been added as a penalty:\n                    </span>\n                <ul className=\"uk-list uk-list-disc uk-list-primary uk-text-small uk-margin-small-top\">\n                    <li>Round 3 worst score: {getNumberAsGolfString(WORST_SCORE_DAY_3)}</li>\n                    <li>Round 4 worst score: {getNumberAsGolfString(todaysWorstScore)}</li>\n                </ul>\n            </div>\n        </PageLayout>\n    );\n\n}","import { STATS_SUCCESS } from './masters-actions';\n\nconst initialState = {\n    player: [],\n    pars: {\n        round1: [],\n        round2: [],\n        round3: [],\n        round4: []\n    },\n    yardages: []\n}\n\nexport default function MastersStatsReducer(state = initialState, action) {\n    switch (action.type) {\n        case STATS_SUCCESS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { PICKS_UPDATE_SUCCESS } from './picks-actions';\n\nconst initialState = JSON.parse(process.env.REACT_APP_SCORES);\n\nexport default function PicksReducer(state = initialState, action) {\n    switch (action.type) {\n        case PICKS_UPDATE_SUCCESS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { CURRENT_PLAYER_UPDATE_SUCCESS } from './player-actions';\n\nconst initialState = {\n    id: '',\n    name: '',\n    stats: {},\n};\n\nexport default function PlayerReducer(state = initialState, action) {\n    switch (action.type) {\n        case CURRENT_PLAYER_UPDATE_SUCCESS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import { applyMiddleware, compose, createStore } from 'redux';\nimport { createHashHistory }                     from 'history';\nimport { routerMiddleware }                      from 'connected-react-router';\nimport createSagaMiddleware                      from 'redux-saga';\nimport { all }                                   from 'redux-saga/effects';\nimport createRootReducer                         from './root-reducer';\nimport { watchStatsAsync }                       from './masters/masters-actions';\nimport { watchPicksAsync }                       from './picks/picks-actions';\nimport { watchPlayerAsync }                      from './player/player-actions';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const history = createHashHistory();\n\nfunction* rootSaga() {\n    yield all([\n        watchStatsAsync(),\n        watchPicksAsync(),\n        watchPlayerAsync()\n    ]);\n}\n\nexport default function store() {\n    const store = createStore(\n        createRootReducer(history),\n        composeEnhancers(\n            applyMiddleware(\n                routerMiddleware(history),\n                sagaMiddleware\n            ))\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n","import React, { useEffect }                    from 'react';\nimport PageLayout                              from '../components/page-layout/page-layout';\nimport { PicksUpdate }                         from '../state/picks/picks-actions';\nimport { StatsStartPolling, StatsStopPolling } from '../state/masters/masters-actions';\nimport { useDispatch, useSelector }            from 'react-redux';\nimport { countries }                           from '../utils/country-svgs';\nimport { getDisplayName, getPosition }         from '../utils/golf-utils';\nimport { CurrentPlayerUpdate }             from '../state/player/player-actions';\nimport PlayerModal, { PlayerModalElement } from '../components/player-modal/player-modal';\nimport '../index.css';\n\nexport default function Leaderboard() {\n\n    let dispatch    = useDispatch();\n    let { masters } = useSelector(state => state);\n\n    useEffect(() => { dispatch(PicksUpdate()); }, [masters, dispatch]);\n    useEffect(() => {\n        dispatch(StatsStartPolling());\n        return () => {\n            dispatch(StatsStopPolling());\n        }\n    }, [dispatch]);\n\n    return (\n        <PageLayout>\n            <table className='uk-table uk-table-small uk-table-striped uk-text-left'>\n                <thead>\n                <tr className='uk-text-small'>\n                    <th className='uk-text-capitalize uk-table-shrink'>Pos</th>\n                    <th className='uk-text-capitalize uk-table-shrink uk-padding-remove-left'/>\n                    <th className='uk-text-capitalize'>Player</th>\n                    <th className='uk-text-capitalize uk-table-shrink'>R{process.env.REACT_APP_CURRENT_ROUND}</th>\n                    <th className='uk-text-capitalize uk-table-shrink'>Thru</th>\n                    <th className='uk-text-capitalize uk-table-shrink'>Score</th>\n                </tr>\n                </thead>\n                <tbody>\n                {masters.player\n                    // .filter(player => player.pos)\n                    .map((player, i) =>\n                        <tr className='uk-text-small' key={`leaderboard-${player.id}-${i}`}>\n                            <td className='uk-text-light uk-text-middle uk-padding-remove-right'>{getPosition(player.pos, player.status)}</td>\n                            <td className='uk-text-light uk-text-left uk-text-middle uk-padding-remove'>\n                                <img className='uk-preserve-width' src={countries[player.countryCode]} width=\"20\"\n                                     alt={player.countryCode}/>\n                            </td>\n                            <td className='uk-text-light uk-text-middle uk-text-truncate color-green'>\n                                <button className='uk-button uk-button-text uk-text-light uk-text-left uk-text-capitalize color-green' onClick={() => showPlayerModal({id: player.id, name: player.display_name2, stats: player})}>\n                                    {getDisplayName(player.first_name, player.last_name)}\n                                </button>\n                            </td>\n                            <td className='uk-text-light uk-text-middle'>{player.today || '-'}</td>\n                            <td className='uk-text-light uk-text-middle'>{player.thru || player.teetime}</td>\n                            <td className='uk-text-light uk-text-middle'>{player.topar || '-'}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <PlayerModal/>\n        </PageLayout>\n    )\n\n    function showPlayerModal(player) {\n        dispatch(CurrentPlayerUpdate(player));\n        PlayerModalElement.show();\n    }\n\n}","import React               from 'react';\nimport { Route }           from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport Summary             from './pages/summary';\nimport store, { history }  from './state/store';\nimport { Provider }        from 'react-redux';\nimport Leaderboard         from './pages/leaderboard';\n\nconst storeConfig = store();\nexport default function App() {\n\n    return (\n        <Provider store={storeConfig}>\n            <ConnectedRouter history={history}>\n                <Route exact path=\"/\" component={Summary}/>\n                <Route path=\"/leaderboard\" component={Leaderboard}/>\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n","import { combineReducers } from 'redux';\nimport { connectRouter }   from 'connected-react-router';\nimport masters             from './masters/masters-reducer';\nimport picks               from './picks/picks-reducer';\nimport player              from './player/player-reducer';\n\nexport default function createRooReducer(history) {\n    return combineReducers({\n        router: connectRouter(history),\n        masters,\n        picks,\n        player\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}